"use strict";function AvisoController(e,t,a,o){e.curPage=1,e.pageSize=12;var n={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){o.get($('meta[name="api"]').attr("content")+"aviso?page="+e.curPage+"&limit="+e.pageSize,n).then(function(t){e.linhas=t.data})},e.add=function(){o.post($('meta[name="api"]').attr("content")+"aviso",e.aviso,n).then(function(t,a){e.status={type:"success",message:"Aviso inserido com sucesso!"},e.aviso="",e.avisoForm.$setPristine()})},e["delete"]=function(t){confirm("Você deseja realmente apagar o ítem?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"aviso/"+t,n).then(function(t){204==t.status?(e.status={type:"success",message:"removida com sucesso!"},a.path("/aviso"),e.load()):e.status={type:"danger",message:"Erro removendo, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"aviso/"+t.id,e.aviso,n).success(function(t){e.status={type:"success",message:"atualizada com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"aviso/"+t.id,n).then(function(t){t.data.data.inicio=new Date(t.data.data.inicio),t.data.data.fim=new Date(t.data.data.fim),e.aviso=t.data.data})}}angular.module("myApp.aviso",["ngRoute"]).config(["$routeProvider",function(e){e.when("/aviso",{templateUrl:"modules/aviso/index.html",controller:"AvisoController"}).when("/aviso/adicionar",{templateUrl:"modules/aviso/add.html",controller:"AvisoController"}).when("/aviso/editar/:id",{templateUrl:"modules/aviso/edit.html",controller:"AvisoController"})}]).controller("AvisoController",["$scope","$routeParams","$location","$http",AvisoController]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXZpc28vaW5kZXguanMiXSwibmFtZXMiOlsiQXZpc29Db250cm9sbGVyIiwiJHNjb3BlIiwiJHJvdXRlUGFyYW1zIiwiJGxvY2F0aW9uIiwiJGh0dHAiLCJjdXJQYWdlIiwicGFnZVNpemUiLCJjb25maWciLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJTaXRlIiwibG9hZCIsImdldCIsIiQiLCJhdHRyIiwidGhlbiIsInJlc3VsdCIsImxpbmhhcyIsImFkZCIsInBvc3QiLCJhdmlzbyIsImRhdGEiLCJzdGF0dXMiLCJ0eXBlIiwibWVzc2FnZSIsImF2aXNvRm9ybSIsIiRzZXRQcmlzdGluZSIsImlkIiwiY29uZmlybSIsInBhdGgiLCJlZGl0IiwicHV0Iiwic3VjY2VzcyIsImVycm9yIiwiaW5pY2lvIiwiRGF0ZSIsImZpbSIsImFuZ3VsYXIiLCJtb2R1bGUiLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBWUEsU0FBU0EsaUJBQWlCQyxFQUFRQyxFQUFjQyxFQUFXQyxHQUN2REgsRUFBT0ksUUFBVyxFQUNsQkosRUFBT0ssU0FBVyxFQU9sQixJQUFJQyxJQUNBQyxTQUNJQyxjQUFlQyxhQUFhQyxRQUFRLFNBQ3BDQyxLQUFNRixhQUFhQyxRQUFRLFNBT25DVixHQUFPWSxLQUFPLFdBQ1ZULEVBQ0tVLElBQUlDLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsY0FBZ0JmLEVBQU9JLFFBQVUsVUFBWUosRUFBT0ssU0FBVUMsR0FDMUdVLEtBQUssU0FBVUMsR0FDWmpCLEVBQU9rQixPQUFVRCxFQUFXLFFBT3hDakIsRUFBT21CLElBQU0sV0FDVGhCLEVBQ0tpQixLQUFLTixFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFFBQVNmLEVBQU9xQixNQUFPZixHQUNwRVUsS0FBSyxTQUFVTSxFQUFNQyxHQUNsQnZCLEVBQU91QixRQUNIQyxLQUFNLFVBQ05DLFFBQVMsK0JBR2J6QixFQUFPcUIsTUFBUSxHQUNmckIsRUFBTzBCLFVBQVVDLGtCQVM3QjNCLEVBQUFBLFVBQWdCLFNBQVU0QixHQUNsQkMsUUFBUSw0RUFDUjFCLEVBQUFBLFVBQ1lXLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsU0FBV2EsRUFBSXRCLEdBQzlEVSxLQUFLLFNBQVVNLEdBQ08sS0FBZkEsRUFBS0MsUUFDTHZCLEVBQU91QixRQUNIQyxLQUFNLFVBQ05DLFFBQVMseUJBR2J2QixFQUFVNEIsS0FBSyxVQUVmOUIsRUFBT1ksUUFFUFosRUFBT3VCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyxpREFVakN6QixFQUFPK0IsS0FBTyxXQUNWNUIsRUFDSzZCLElBQUlsQixFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVdkLEVBQWEyQixHQUFJNUIsRUFBT3FCLE1BQU9mLEdBQ3RGMkIsUUFBUSxTQUFVWCxHQUNmdEIsRUFBT3VCLFFBQ0hDLEtBQU0sVUFDTkMsUUFBUyw2QkFHaEJTLE1BQU0sV0FDSGxDLEVBQU91QixRQUNIQyxLQUFNLFNBQ05DLFFBQVMsOERBUXpCekIsRUFBT2EsSUFBTSxXQUNUVixFQUNLVSxJQUFJQyxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVdkLEVBQWEyQixHQUFJdEIsR0FDeEVVLEtBQUssU0FBVU0sR0FDWkEsRUFBS0EsS0FBS0EsS0FBS2EsT0FBUyxHQUFJQyxNQUFLZCxFQUFLQSxLQUFLQSxLQUFLYSxRQUNoRGIsRUFBS0EsS0FBS0EsS0FBS2UsSUFBTSxHQUFJRCxNQUFLZCxFQUFLQSxLQUFLQSxLQUFLZSxLQUU3Q3JDLEVBQU9xQixNQUFTQyxFQUFLQSxLQUFTLFFBSzlDZ0IsUUFDS0MsT0FBTyxlQUFnQixZQUV2QmpDLFFBQVEsaUJBQWtCLFNBQVVrQyxHQUNqQ0EsRUFDS0MsS0FBSyxVQUNGQyxZQUFhLDJCQUNiQyxXQUFZLG9CQUVmRixLQUFLLG9CQUNGQyxZQUFhLHlCQUNiQyxXQUFZLG9CQUVmRixLQUFLLHFCQUNGQyxZQUFhLDBCQUNiQyxXQUFZLHVCQUt2QkEsV0FBVyxtQkFBb0IsU0FBVSxlQUFnQixZQUFhLFFBQVM1QyIsImZpbGUiOiJtb2R1bGVzL2F2aXNvL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEF2aXNvc1xuICpcbiAqIEBwYXJhbSAkc2NvcGVcbiAqIEBwYXJhbSAkcm91dGVQYXJhbXNcbiAqIEBwYXJhbSAkbG9jYXRpb25cbiAqIEBwYXJhbSAkaHR0cFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBdmlzb0NvbnRyb2xsZXIgKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sICRodHRwKSB7XG4gICAgJHNjb3BlLmN1clBhZ2UgID0gMTtcbiAgICAkc2NvcGUucGFnZVNpemUgPSAxMjtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYWwgY29uZmlnXG4gICAgICpcbiAgICAgKiBAdHlwZSB7e2hlYWRlcnM6IHtBdXRob3JpemF0aW9uLCBTaXRlfX19XG4gICAgICovXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgICAgICAgICBTaXRlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2l0ZScpXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FycmVnYSBvcyBBdmlzb3MgY2FkYXN0cmFkb3NcbiAgICAgKi9cbiAgICAkc2NvcGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5nZXQoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2F2aXNvP3BhZ2U9JyArICRzY29wZS5jdXJQYWdlICsgJyZsaW1pdD0nICsgJHNjb3BlLnBhZ2VTaXplLCBjb25maWcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpbmhhcyA9IChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRpY2lvbmFyIEF2aXNvXG4gICAgICovXG4gICAgJHNjb3BlLmFkZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5wb3N0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzbycsICRzY29wZS5hdmlzbywgY29uZmlnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0F2aXNvIGluc2VyaWRvIGNvbSBzdWNlc3NvISdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF2aXNvID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmF2aXNvRm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcGFnYXIgYXZpc29cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqL1xuICAgICRzY29wZS5kZWxldGUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKGNvbmZpcm0oJ1ZvY8OqIGRlc2VqYSByZWFsbWVudGUgYXBhZ2FyIG8gw610ZW0/XFxuRXN0ZSBwcm9jZWRpbWVudG8gw6kgaXJyZXZlcnPDrXZlbCEnKSkge1xuICAgICAgICAgICAgJGh0dHBcbiAgICAgICAgICAgICAgICAuZGVsZXRlKCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzby8nICsgaWQsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gMjA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncmVtb3ZpZGEgY29tIHN1Y2Vzc28hJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hdmlzbycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJybyByZW1vdmVuZG8sIHRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRWRpdGFyIEF2aXNvXG4gICAgICovXG4gICAgJHNjb3BlLmVkaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAucHV0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzby8nICsgJHJvdXRlUGFyYW1zLmlkLCAkc2NvcGUuYXZpc28sIGNvbmZpZylcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnYXR1YWxpemFkYSBjb20gc3VjZXNzbyEnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdPY29ycmV1IHVtIGVycm8gYXR1YWxpemFuZG8sIHRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cGVyYXIgQXZpc28gcGFyYSB2aXN1YWxpemHDp8Ojb1xuICAgICAqL1xuICAgICRzY29wZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzby8nICsgJHJvdXRlUGFyYW1zLmlkLCBjb25maWcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRhdGEuZGF0YS5kYXRhLmluaWNpbyA9IG5ldyBEYXRlKGRhdGEuZGF0YS5kYXRhLmluaWNpbyk7XG4gICAgICAgICAgICAgICAgZGF0YS5kYXRhLmRhdGEuZmltID0gbmV3IERhdGUoZGF0YS5kYXRhLmRhdGEuZmltKTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5hdmlzbyA9IChkYXRhLmRhdGEuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdteUFwcC5hdmlzbycsIFsnbmdSb3V0ZSddKVxuXG4gICAgLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignL2F2aXNvJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hdmlzby9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXZpc29Db250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvYXZpc28vYWRpY2lvbmFyJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hdmlzby9hZGQuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0F2aXNvQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2F2aXNvL2VkaXRhci86aWQnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2F2aXNvL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0F2aXNvQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcblxuICAgIC5jb250cm9sbGVyKCdBdmlzb0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgQXZpc29Db250cm9sbGVyXSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
