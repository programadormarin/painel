"use strict";function AvisoController(e,t,a,o){e.curPage=1,e.pageSize=12,e.load=function(){o.get($('meta[name="api"]').attr("content")+"aviso?page="+e.curPage+"&limit="+e.pageSize).then(function(t){e.linhas=t.data})},e.add=function(){o.post($('meta[name="api"]').attr("content")+"aviso",e.aviso).then(function(t,a){e.status={type:"success",message:"Aviso inserido com sucesso!"},e.aviso="",e.avisoForm.$setPristine()})},e["delete"]=function(t){confirm("Você deseja realmente apagar o ítem?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"aviso/"+t).then(function(t){204==t.status?(e.status={type:"success",message:"removida com sucesso!"},a.path("/aviso"),e.load()):e.status={type:"danger",message:"Erro removendo, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"aviso/"+t.id,e.aviso).success(function(t){e.status={type:"success",message:"atualizada com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"aviso/"+t.id).then(function(t){t.data.data.inicio=new Date(t.data.data.inicio),t.data.data.fim=new Date(t.data.data.fim),e.aviso=t.data.data})}}angular.module("myApp.aviso",["ngRoute"]).config(["$routeProvider",function(e){e.when("/aviso",{templateUrl:"modules/aviso/index.html",controller:"AvisoController"}).when("/aviso/adicionar",{templateUrl:"modules/aviso/add.html",controller:"AvisoController"}).when("/aviso/editar/:id",{templateUrl:"modules/aviso/edit.html",controller:"AvisoController"})}]).controller("AvisoController",["$scope","$routeParams","$location","$http",AvisoController]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF2aXNvL2luZGV4LmpzIl0sIm5hbWVzIjpbIkF2aXNvQ29udHJvbGxlciIsIiRzY29wZSIsIiRyb3V0ZVBhcmFtcyIsIiRsb2NhdGlvbiIsIiRodHRwIiwiY3VyUGFnZSIsInBhZ2VTaXplIiwibG9hZCIsImdldCIsIiQiLCJhdHRyIiwidGhlbiIsInJlc3VsdCIsImxpbmhhcyIsImFkZCIsInBvc3QiLCJhdmlzbyIsImRhdGEiLCJzdGF0dXMiLCJ0eXBlIiwibWVzc2FnZSIsImF2aXNvRm9ybSIsIiRzZXRQcmlzdGluZSIsImlkIiwiY29uZmlybSIsInBhdGgiLCJlZGl0IiwicHV0Iiwic3VjY2VzcyIsImVycm9yIiwiaW5pY2lvIiwiRGF0ZSIsImZpbSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBWUEsU0FBU0EsaUJBQWlCQyxFQUFRQyxFQUFjQyxFQUFXQyxHQUN2REgsRUFBT0ksUUFBVyxFQUNsQkosRUFBT0ssU0FBVyxHQUtsQkwsRUFBT00sS0FBTyxXQUNWSCxFQUNLSSxJQUFJQyxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLGNBQWdCVCxFQUFPSSxRQUFVLFVBQVlKLEVBQU9LLFVBQ2hHSyxLQUFLLFNBQVVDLEdBQ1pYLEVBQU9ZLE9BQVVELEVBQVcsUUFPeENYLEVBQU9hLElBQU0sV0FDVFYsRUFDS1csS0FBS04sRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxRQUFTVCxFQUFPZSxPQUM3REwsS0FBSyxTQUFVTSxFQUFNQyxHQUNsQmpCLEVBQU9pQixRQUNIQyxLQUFNLFVBQ05DLFFBQVMsK0JBR2JuQixFQUFPZSxNQUFRLEdBQ2ZmLEVBQU9vQixVQUFVQyxrQkFTN0JyQixFQUFBQSxVQUFnQixTQUFVc0IsR0FDbEJDLFFBQVEsNEVBQ1JwQixFQUFBQSxVQUNZSyxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVdhLEdBQzFEWixLQUFLLFNBQVVNLEdBQ08sS0FBZkEsRUFBS0MsUUFDTGpCLEVBQU9pQixRQUNIQyxLQUFNLFVBQ05DLFFBQVMseUJBR2JqQixFQUFVc0IsS0FBSyxVQUVmeEIsRUFBT00sUUFFUE4sRUFBT2lCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyxpREFVakNuQixFQUFPeUIsS0FBTyxXQUNWdEIsRUFDS3VCLElBQUlsQixFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVdSLEVBQWFxQixHQUFJdEIsRUFBT2UsT0FDL0VZLFFBQVEsU0FBVVgsR0FDZmhCLEVBQU9pQixRQUNIQyxLQUFNLFVBQ05DLFFBQVMsNkJBR2hCUyxNQUFNLFdBQ0g1QixFQUFPaUIsUUFDSEMsS0FBTSxTQUNOQyxRQUFTLDhEQVF6Qm5CLEVBQU9PLElBQU0sV0FDVEosRUFDS0ksSUFBSUMsRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxTQUFXUixFQUFhcUIsSUFDcEVaLEtBQUssU0FBVU0sR0FDWkEsRUFBS0EsS0FBS0EsS0FBS2EsT0FBUyxHQUFJQyxNQUFLZCxFQUFLQSxLQUFLQSxLQUFLYSxRQUNoRGIsRUFBS0EsS0FBS0EsS0FBS2UsSUFBTSxHQUFJRCxNQUFLZCxFQUFLQSxLQUFLQSxLQUFLZSxLQUU3Qy9CLEVBQU9lLE1BQVNDLEVBQUtBLEtBQVMsUUFLOUNnQixRQUNLQyxPQUFPLGVBQWdCLFlBRXZCQyxRQUFRLGlCQUFrQixTQUFVQyxHQUNqQ0EsRUFDS0MsS0FBSyxVQUNGQyxZQUFhLDJCQUNiQyxXQUFZLG9CQUVmRixLQUFLLG9CQUNGQyxZQUFhLHlCQUNiQyxXQUFZLG9CQUVmRixLQUFLLHFCQUNGQyxZQUFhLDBCQUNiQyxXQUFZLHVCQUt2QkEsV0FBVyxtQkFBb0IsU0FBVSxlQUFnQixZQUFhLFFBQVN2QyIsImZpbGUiOiJhdmlzby9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBdmlzb3NcbiAqXG4gKiBAcGFyYW0gJHNjb3BlXG4gKiBAcGFyYW0gJHJvdXRlUGFyYW1zXG4gKiBAcGFyYW0gJGxvY2F0aW9uXG4gKiBAcGFyYW0gJGh0dHBcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXZpc29Db250cm9sbGVyICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCAkaHR0cCkge1xuICAgICRzY29wZS5jdXJQYWdlICA9IDE7XG4gICAgJHNjb3BlLnBhZ2VTaXplID0gMTI7XG5cbiAgICAvKipcbiAgICAgKiBDYXJyZWdhIG9zIEF2aXNvcyBjYWRhc3RyYWRvc1xuICAgICAqL1xuICAgICRzY29wZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLmdldCgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnYXZpc28/cGFnZT0nICsgJHNjb3BlLmN1clBhZ2UgKyAnJmxpbWl0PScgKyAkc2NvcGUucGFnZVNpemUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpbmhhcyA9IChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRpY2lvbmFyIEF2aXNvXG4gICAgICovXG4gICAgJHNjb3BlLmFkZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5wb3N0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzbycsICRzY29wZS5hdmlzbylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBdmlzbyBpbnNlcmlkbyBjb20gc3VjZXNzbyEnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5hdmlzbyA9ICcnO1xuICAgICAgICAgICAgICAgICRzY29wZS5hdmlzb0Zvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBhZ2FyIGF2aXNvXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKi9cbiAgICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChjb25maXJtKCdWb2PDqiBkZXNlamEgcmVhbG1lbnRlIGFwYWdhciBvIMOtdGVtP1xcbkVzdGUgcHJvY2VkaW1lbnRvIMOpIGlycmV2ZXJzw612ZWwhJykpIHtcbiAgICAgICAgICAgICRodHRwXG4gICAgICAgICAgICAgICAgLmRlbGV0ZSgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnYXZpc28vJyArIGlkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSAyMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdyZW1vdmlkYSBjb20gc3VjZXNzbyEnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2F2aXNvJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvIHJlbW92ZW5kbywgdGVudGUgbm92YW1lbnRlIG1haXMgdGFyZGUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFZGl0YXIgQXZpc29cbiAgICAgKi9cbiAgICAkc2NvcGUuZWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5wdXQoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2F2aXNvLycgKyAkcm91dGVQYXJhbXMuaWQsICRzY29wZS5hdmlzbylcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnYXR1YWxpemFkYSBjb20gc3VjZXNzbyEnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdPY29ycmV1IHVtIGVycm8gYXR1YWxpemFuZG8sIHRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cGVyYXIgQXZpc28gcGFyYSB2aXN1YWxpemHDp8Ojb1xuICAgICAqL1xuICAgICRzY29wZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzby8nICsgJHJvdXRlUGFyYW1zLmlkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmRhdGEuZGF0YS5pbmljaW8gPSBuZXcgRGF0ZShkYXRhLmRhdGEuZGF0YS5pbmljaW8pO1xuICAgICAgICAgICAgICAgIGRhdGEuZGF0YS5kYXRhLmZpbSA9IG5ldyBEYXRlKGRhdGEuZGF0YS5kYXRhLmZpbSk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXZpc28gPSAoZGF0YS5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbXlBcHAuYXZpc28nLCBbJ25nUm91dGUnXSlcblxuICAgIC5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAgICAgLndoZW4oJy9hdmlzbycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvYXZpc28vaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0F2aXNvQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2F2aXNvL2FkaWNpb25hcicsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvYXZpc28vYWRkLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBdmlzb0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9hdmlzby9lZGl0YXIvOmlkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hdmlzby9lZGl0Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBdmlzb0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG5cbiAgICAuY29udHJvbGxlcignQXZpc29Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICckaHR0cCcsIEF2aXNvQ29udHJvbGxlcl0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
