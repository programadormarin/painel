"use strict";function AvisoController(e,t,a,o){e.curPage=1,e.pageSize=12;var n={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){o.get($('meta[name="api"]').attr("content")+"aviso?page="+e.curPage+"&limit="+e.pageSize,n).then(function(t){e.linhas=t.data})},e.add=function(){o.post($('meta[name="api"]').attr("content")+"aviso",e.aviso,n).then(function(t,a){e.status={type:"success",message:"Aviso inserido com sucesso!"},e.aviso="",e.avisoForm.$setPristine()})},e["delete"]=function(t){confirm("Você deseja realmente apagar o ítem?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"aviso/"+t,n).then(function(t){204==t.status?(e.status={type:"success",message:"removida com sucesso!"},a.path("/aviso"),e.load()):e.status={type:"danger",message:"Erro removendo, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"aviso/"+t.id,e.aviso,n).success(function(t){e.status={type:"success",message:"atualizada com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"aviso/"+t.id,n).then(function(t){t.data.data.inicio=new Date(t.data.data.inicio),t.data.data.fim=new Date(t.data.data.fim),e.aviso=t.data.data})}}angular.module("myApp.aviso",["ngRoute"]).config(["$routeProvider",function(e){e.when("/aviso",{templateUrl:"modules/aviso/index.html",controller:"AvisoController"}).when("/aviso/adicionar",{templateUrl:"modules/aviso/add.html",controller:"AvisoController"}).when("/aviso/editar/:id",{templateUrl:"modules/aviso/edit.html",controller:"AvisoController"})}]).controller("AvisoController",["$scope","$routeParams","$location","$http",AvisoController]);
//# sourceMappingURL=data:application/json;base64,
