"use strict";function AvisoController(e,t,a,o){e.curPage=1,e.pageSize=12,e.pageTitle="Avisos",e.load=function(){o.get($('meta[name="api"]').attr("content")+"aviso?page="+e.curPage+"&limit="+e.pageSize).then(function(t){e.linhas=t.data})},e.add=function(){o.post($('meta[name="api"]').attr("content")+"aviso",e.aviso).then(function(t,a){e.status={type:"success",message:"Aviso inserido com sucesso!"},e.aviso="",e.avisoForm.$setPristine()})},e["delete"]=function(t){confirm("Você deseja realmente apagar o ítem?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"aviso/"+t).then(function(t){204==t.status?(e.status={type:"success",message:"removida com sucesso!"},a.path("/aviso"),e.load()):e.status={type:"danger",message:"Erro removendo, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"aviso/"+t.id,e.aviso).success(function(t){e.status={type:"success",message:"atualizada com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"aviso/"+t.id).then(function(t){t.data.data.inicio=new Date(t.data.data.inicio),t.data.data.fim=new Date(t.data.data.fim),e.aviso=t.data.data})}}angular.module("myApp.aviso",["ngRoute"]).config(["$routeProvider",function(e){e.when("/aviso",{templateUrl:"modules/aviso/index.html",controller:"AvisoController"}).when("/aviso/adicionar",{templateUrl:"modules/aviso/add.html",controller:"AvisoController"}).when("/aviso/editar/:id",{templateUrl:"modules/aviso/edit.html",controller:"AvisoController"})}]).controller("AvisoController",["$scope","$routeParams","$location","$http",AvisoController]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF2aXNvL2luZGV4LmpzIl0sIm5hbWVzIjpbIkF2aXNvQ29udHJvbGxlciIsIiRzY29wZSIsIiRyb3V0ZVBhcmFtcyIsIiRsb2NhdGlvbiIsIiRodHRwIiwiY3VyUGFnZSIsInBhZ2VTaXplIiwicGFnZVRpdGxlIiwibG9hZCIsImdldCIsIiQiLCJhdHRyIiwidGhlbiIsInJlc3VsdCIsImxpbmhhcyIsImFkZCIsInBvc3QiLCJhdmlzbyIsImRhdGEiLCJzdGF0dXMiLCJ0eXBlIiwibWVzc2FnZSIsImF2aXNvRm9ybSIsIiRzZXRQcmlzdGluZSIsImlkIiwiY29uZmlybSIsInBhdGgiLCJlZGl0IiwicHV0Iiwic3VjY2VzcyIsImVycm9yIiwiaW5pY2lvIiwiRGF0ZSIsImZpbSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBWUEsU0FBU0EsaUJBQWlCQyxFQUFRQyxFQUFjQyxFQUFXQyxHQUN2REgsRUFBT0ksUUFBWSxFQUNuQkosRUFBT0ssU0FBWSxHQUNuQkwsRUFBT00sVUFBWSxTQUtuQk4sRUFBT08sS0FBTyxXQUNWSixFQUNLSyxJQUFJQyxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLGNBQWdCVixFQUFPSSxRQUFVLFVBQVlKLEVBQU9LLFVBQ2hHTSxLQUFLLFNBQVVDLEdBQ1paLEVBQU9hLE9BQVVELEVBQVcsUUFPeENaLEVBQU9jLElBQU0sV0FDVFgsRUFDS1ksS0FBS04sRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxRQUFTVixFQUFPZ0IsT0FDN0RMLEtBQUssU0FBVU0sRUFBTUMsR0FDbEJsQixFQUFPa0IsUUFDSEMsS0FBTSxVQUNOQyxRQUFTLCtCQUdicEIsRUFBT2dCLE1BQVEsR0FDZmhCLEVBQU9xQixVQUFVQyxrQkFTN0J0QixFQUFBQSxVQUFnQixTQUFVdUIsR0FDbEJDLFFBQVEsNEVBQ1JyQixFQUFBQSxVQUNZTSxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVdhLEdBQzFEWixLQUFLLFNBQVVNLEdBQ08sS0FBZkEsRUFBS0MsUUFDTGxCLEVBQU9rQixRQUNIQyxLQUFNLFVBQ05DLFFBQVMseUJBR2JsQixFQUFVdUIsS0FBSyxVQUVmekIsRUFBT08sUUFFUFAsRUFBT2tCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyxpREFVakNwQixFQUFPMEIsS0FBTyxXQUNWdkIsRUFDS3dCLElBQUlsQixFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVdULEVBQWFzQixHQUFJdkIsRUFBT2dCLE9BQy9FWSxRQUFRLFNBQVVYLEdBQ2ZqQixFQUFPa0IsUUFDSEMsS0FBTSxVQUNOQyxRQUFTLDZCQUdoQlMsTUFBTSxXQUNIN0IsRUFBT2tCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyw4REFRekJwQixFQUFPUSxJQUFNLFdBQ1RMLEVBQ0tLLElBQUlDLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsU0FBV1QsRUFBYXNCLElBQ3BFWixLQUFLLFNBQVVNLEdBQ1pBLEVBQUtBLEtBQUtBLEtBQUthLE9BQVMsR0FBSUMsTUFBS2QsRUFBS0EsS0FBS0EsS0FBS2EsUUFDaERiLEVBQUtBLEtBQUtBLEtBQUtlLElBQU0sR0FBSUQsTUFBS2QsRUFBS0EsS0FBS0EsS0FBS2UsS0FFN0NoQyxFQUFPZ0IsTUFBU0MsRUFBS0EsS0FBUyxRQUs5Q2dCLFFBQ0tDLE9BQU8sZUFBZ0IsWUFFdkJDLFFBQVEsaUJBQWtCLFNBQVVDLEdBQ2pDQSxFQUNLQyxLQUFLLFVBQ0ZDLFlBQWEsMkJBQ2JDLFdBQVksb0JBRWZGLEtBQUssb0JBQ0ZDLFlBQWEseUJBQ2JDLFdBQVksb0JBRWZGLEtBQUsscUJBQ0ZDLFlBQWEsMEJBQ2JDLFdBQVksdUJBS3ZCQSxXQUFXLG1CQUFvQixTQUFVLGVBQWdCLFlBQWEsUUFBU3hDIiwiZmlsZSI6ImF2aXNvL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEF2aXNvc1xuICpcbiAqIEBwYXJhbSAkc2NvcGVcbiAqIEBwYXJhbSAkcm91dGVQYXJhbXNcbiAqIEBwYXJhbSAkbG9jYXRpb25cbiAqIEBwYXJhbSAkaHR0cFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBdmlzb0NvbnRyb2xsZXIgKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sICRodHRwKSB7XG4gICAgJHNjb3BlLmN1clBhZ2UgICA9IDE7XG4gICAgJHNjb3BlLnBhZ2VTaXplICA9IDEyO1xuICAgICRzY29wZS5wYWdlVGl0bGUgPSAnQXZpc29zJztcblxuICAgIC8qKlxuICAgICAqIENhcnJlZ2Egb3MgQXZpc29zIGNhZGFzdHJhZG9zXG4gICAgICovXG4gICAgJHNjb3BlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzbz9wYWdlPScgKyAkc2NvcGUuY3VyUGFnZSArICcmbGltaXQ9JyArICRzY29wZS5wYWdlU2l6ZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGluaGFzID0gKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGljaW9uYXIgQXZpc29cbiAgICAgKi9cbiAgICAkc2NvcGUuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLnBvc3QoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2F2aXNvJywgJHNjb3BlLmF2aXNvKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0F2aXNvIGluc2VyaWRvIGNvbSBzdWNlc3NvISdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF2aXNvID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmF2aXNvRm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcGFnYXIgYXZpc29cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqL1xuICAgICRzY29wZS5kZWxldGUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKGNvbmZpcm0oJ1ZvY8OqIGRlc2VqYSByZWFsbWVudGUgYXBhZ2FyIG8gw610ZW0/XFxuRXN0ZSBwcm9jZWRpbWVudG8gw6kgaXJyZXZlcnPDrXZlbCEnKSkge1xuICAgICAgICAgICAgJGh0dHBcbiAgICAgICAgICAgICAgICAuZGVsZXRlKCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdhdmlzby8nICsgaWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09IDIwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3JlbW92aWRhIGNvbSBzdWNlc3NvISdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYXZpc28nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm8gcmVtb3ZlbmRvLCB0ZW50ZSBub3ZhbWVudGUgbWFpcyB0YXJkZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVkaXRhciBBdmlzb1xuICAgICAqL1xuICAgICRzY29wZS5lZGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLnB1dCgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnYXZpc28vJyArICRyb3V0ZVBhcmFtcy5pZCwgJHNjb3BlLmF2aXNvKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdhdHVhbGl6YWRhIGNvbSBzdWNlc3NvISdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ09jb3JyZXUgdW0gZXJybyBhdHVhbGl6YW5kbywgdGVudGUgbm92YW1lbnRlIG1haXMgdGFyZGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlY3VwZXJhciBBdmlzbyBwYXJhIHZpc3VhbGl6YcOnw6NvXG4gICAgICovXG4gICAgJHNjb3BlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5nZXQoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2F2aXNvLycgKyAkcm91dGVQYXJhbXMuaWQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRhdGEuZGF0YS5kYXRhLmluaWNpbyA9IG5ldyBEYXRlKGRhdGEuZGF0YS5kYXRhLmluaWNpbyk7XG4gICAgICAgICAgICAgICAgZGF0YS5kYXRhLmRhdGEuZmltID0gbmV3IERhdGUoZGF0YS5kYXRhLmRhdGEuZmltKTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5hdmlzbyA9IChkYXRhLmRhdGEuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdteUFwcC5hdmlzbycsIFsnbmdSb3V0ZSddKVxuXG4gICAgLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignL2F2aXNvJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hdmlzby9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXZpc29Db250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvYXZpc28vYWRpY2lvbmFyJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hdmlzby9hZGQuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0F2aXNvQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2F2aXNvL2VkaXRhci86aWQnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2F2aXNvL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0F2aXNvQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcblxuICAgIC5jb250cm9sbGVyKCdBdmlzb0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgQXZpc29Db250cm9sbGVyXSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
