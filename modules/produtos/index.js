"use strict";angular.module("myApp.produtos",["ngRoute","ngInputTypeFile","angular-cloudinary"]).config(["$routeProvider",function(o){o.when("/produtos",{templateUrl:"modules/produtos/index.html",controller:"ProdutosController"}).when("/produtos/adicionar",{templateUrl:"modules/produtos/add.html",controller:"ProdutosController"}).when("/produtos/editar/:id",{templateUrl:"modules/produtos/edit.html",controller:"ProdutosController"})}]).controller("ProdutosController",["$scope","$routeParams","$location","api","cloudinary",function(o,t,e,r,a){o.curPage=1,o.pageSize=12,o.load=function(){r.get("produto?page="+o.curPage+"&limit="+o.pageSize+"&t="+new Date).then(function(t){o.linhas=t.data})},o.upload=function(){var t=o.produto;a.upload(t.imagem[0],{}).then(function(e){t.imagem=e.data,o.add(t)})},o.add=function(){var t=o.produto;r.post("produto",t).then(function(t){201===t.status?(e.url("/produtos"),o.load()):o.status={type:"danger",message:"Erro cadastrando produto, tente novamente mais tarde"}})},o["delete"]=function(t){if(confirm("Você deseja realmente apagar o produto?\nEste procedimento é irreversível!")){var e=o.linhas.data[t];r["delete"]("produto/"+e._id).then(function(e){204==e.status?(o.status={type:"success",message:"produto removido com sucesso!"},o.linhas.data.splice(t,1)):o.status={type:"danger",message:"Erro removendo produto, tente novamente mais tarde"}})}},o.edit=function(){r.put("produto/"+t.id,o.produto).success(function(t){o.status={type:"success",message:"produto atualizado com sucesso!"}}).error(function(){o.status={type:"danger",message:"Ocorreu um erro atualizando os dados do produto, tente novamente mais tarde"}})},o.get=function(){r.get("produto/"+t.id).then(function(t){o.produto=t.data.data})}}]);
//# sourceMappingURL=data:application/json;base64,
