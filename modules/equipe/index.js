"use strict";function EquipeController(e,t,a,o,n){e.curPage=1,e.pageSize=12;var r={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){var t=$('meta[name="api"]').attr("content")+"equipe?page="+e.curPage+"&limit="+e.pageSize;o.get(t,r).then(function(t){e.linhas=t.data})},e.upload=function(){var t=e.membro;n.upload(t.imagem[0],{}).then(function(a){t.imagem=a.data,e.add(t)})},e.add=function(){var t=e.membro;o.post($('meta[name="api"]').attr("content")+"equipe",t,r).then(function(t){201===t.status?(a.url("/equipe"),e.load()):e.status={type:"danger",message:"Erro cadastrando membro, tente novamente mais tarde"}})},e["delete"]=function(t){confirm("Você deseja realmente apagar o membro?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"equipe/"+t,r).then(function(t){200==t.status?(e.status={type:"success",message:"Membro removido com sucesso!"},a.path("/equipe"),e.load()):e.status={type:"danger",message:"Erro removendo membro, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"equipe/"+t.id,e.membro,r).success(function(t){e.status={type:"success",message:"Membro atualizado com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando os dados do membro, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"equipe/"+t.id,r).then(function(t){e.membro=t.data.data})}}angular.module("myApp.equipe",["ngRoute","ngFileUpload"]).config(["$routeProvider",function(e){e.when("/equipe",{templateUrl:"modules/equipe/index.html",controller:"EquipeController"}).when("/equipe/adicionar",{templateUrl:"modules/equipe/add.html",controller:"EquipeController"}).when("/equipe/editar/:id",{templateUrl:"modules/equipe/edit.html",controller:"EquipeController"})}]).controller("EquipeController",["$scope","$routeParams","$location","$http","Upload",EquipeController]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZXF1aXBlL2luZGV4LmpzIl0sIm5hbWVzIjpbIkVxdWlwZUNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkcm91dGVQYXJhbXMiLCIkbG9jYXRpb24iLCIkaHR0cCIsIiRjbG91ZGluYXJ5IiwiY3VyUGFnZSIsInBhZ2VTaXplIiwiY29uZmlnIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiU2l0ZSIsImxvYWQiLCJ1cmwiLCIkIiwiYXR0ciIsImdldCIsInRoZW4iLCJkYXRhIiwibGluaGFzIiwidXBsb2FkIiwiJG1lbWJybyIsIm1lbWJybyIsImltYWdlbSIsInJlc3AiLCJhZGQiLCJwb3N0Iiwic3RhdHVzIiwidHlwZSIsIm1lc3NhZ2UiLCJpZCIsImNvbmZpcm0iLCJwYXRoIiwiZWRpdCIsInB1dCIsInN1Y2Nlc3MiLCJlcnJvciIsImFuZ3VsYXIiLCJtb2R1bGUiLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBYUEsU0FBU0Esa0JBQWtCQyxFQUFRQyxFQUFjQyxFQUFXQyxFQUFPQyxHQUMvREosRUFBT0ssUUFBVyxFQUNsQkwsRUFBT00sU0FBVyxFQU9sQixJQUFJQyxJQUNBQyxTQUNJQyxjQUFlQyxhQUFhQyxRQUFRLFNBQ3BDQyxLQUFNRixhQUFhQyxRQUFRLFNBT25DWCxHQUFPYSxLQUFPLFdBQ1YsR0FBSUMsR0FBTUMsRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxlQUFpQmhCLEVBQU9LLFFBQVUsVUFBWUwsRUFBT00sUUFFdkdILEdBQ0tjLElBQUlILEVBQUtQLEdBQ1RXLEtBQUssU0FBVUMsR0FDWm5CLEVBQU9vQixPQUFVRCxFQUFTLFFBT3RDbkIsRUFBT3FCLE9BQVMsV0FDWixHQUFJQyxHQUFVdEIsRUFBT3VCLE1BRXJCbkIsR0FDS2lCLE9BQU9DLEVBQVFFLE9BQU8sT0FDdEJOLEtBQUssU0FBVU8sR0FDWkgsRUFBUUUsT0FBU0MsRUFBS04sS0FFdEJuQixFQUFPMEIsSUFBSUosTUFPdkJ0QixFQUFPMEIsSUFBTSxXQUNULEdBQUlKLEdBQVV0QixFQUFPdUIsTUFFckJwQixHQUNLd0IsS0FBS1osRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxTQUFVTSxFQUFTZixHQUNoRVcsS0FBSyxTQUFVQyxHQUNRLE1BQWhCQSxFQUFLUyxRQUNMMUIsRUFBVVksSUFBSSxXQUNkZCxFQUFPYSxRQUVQYixFQUFPNEIsUUFDSEMsS0FBTSxTQUNOQyxRQUFTLDBEQVc3QjlCLEVBQUFBLFVBQWdCLFNBQVUrQixHQUNsQkMsUUFBUSw4RUFDUjdCLEVBQUFBLFVBQ1lZLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsVUFBWWUsRUFBSXhCLEdBQy9EVyxLQUFLLFNBQVVDLEdBQ08sS0FBZkEsRUFBS1MsUUFDTDVCLEVBQU80QixRQUNIQyxLQUFNLFVBQ05DLFFBQVMsZ0NBR2I1QixFQUFVK0IsS0FBSyxXQUNmakMsRUFBT2EsUUFFUGIsRUFBTzRCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyx3REFVakM5QixFQUFPa0MsS0FBTyxXQUNWL0IsRUFDS2dDLElBQUlwQixFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFVBQVlmLEVBQWE4QixHQUFJL0IsRUFBT3VCLE9BQVFoQixHQUN4RjZCLFFBQVEsU0FBVWpCLEdBQ2ZuQixFQUFPNEIsUUFDSEMsS0FBTSxVQUNOQyxRQUFTLG9DQUdoQk8sTUFBTSxXQUNIckMsRUFBTzRCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyxpRkFRekI5QixFQUFPaUIsSUFBTSxXQUNUZCxFQUNLYyxJQUFJRixFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFVBQVlmLEVBQWE4QixHQUFJeEIsR0FDekVXLEtBQUssU0FBVUMsR0FDWm5CLEVBQU91QixPQUFVSixFQUFLQSxLQUFTLFFBSy9DbUIsUUFDS0MsT0FBTyxnQkFBaUIsVUFBVyxpQkFFbkNoQyxRQUFRLGlCQUFrQixTQUFVaUMsR0FDakNBLEVBQ0tDLEtBQUssV0FDRkMsWUFBYSw0QkFDYkMsV0FBWSxxQkFFZkYsS0FBSyxxQkFDRkMsWUFBYSwwQkFDYkMsV0FBWSxxQkFFZkYsS0FBSyxzQkFDRkMsWUFBYSwyQkFDYkMsV0FBWSx3QkFLdkJBLFdBQVcsb0JBQXFCLFNBQVUsZUFBZ0IsWUFBYSxRQUFTLFNBQVU1QyIsImZpbGUiOiJtb2R1bGVzL2VxdWlwZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBFcXVpcGVcbiAqIFxuICogQHBhcmFtICRzY29wZVxuICogQHBhcmFtICRyb3V0ZVBhcmFtc1xuICogQHBhcmFtICRsb2NhdGlvblxuICogQHBhcmFtICRodHRwXG4gKiBAcGFyYW0gJGNsb3VkaW5hcnlcbiAqIFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEVxdWlwZUNvbnRyb2xsZXIgKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sICRodHRwLCAkY2xvdWRpbmFyeSkge1xuICAgICRzY29wZS5jdXJQYWdlICA9IDE7XG4gICAgJHNjb3BlLnBhZ2VTaXplID0gMTI7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmFsIGNvbmZpZ1xuICAgICAqXG4gICAgICogQHR5cGUge3toZWFkZXJzOiB7QXV0aG9yaXphdGlvbiwgU2l0ZX19fVxuICAgICAqL1xuICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgU2l0ZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NpdGUnKVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhcnJlZ2EgRXF1aXBlXG4gICAgICovXG4gICAgJHNjb3BlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1cmwgPSAkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnZXF1aXBlP3BhZ2U9JyArICRzY29wZS5jdXJQYWdlICsgJyZsaW1pdD0nICsgJHNjb3BlLnBhZ2VTaXplO1xuXG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KHVybCwgY29uZmlnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGluaGFzID0gKGRhdGEuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmF6IG8gdXBsb2FkIGRhIGZvdG8gZG8gbWVtYnJvIGRhIGVxdWlwZVxuICAgICAqL1xuICAgICRzY29wZS51cGxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyICRtZW1icm8gPSAkc2NvcGUubWVtYnJvO1xuXG4gICAgICAgICRjbG91ZGluYXJ5XG4gICAgICAgICAgICAudXBsb2FkKCRtZW1icm8uaW1hZ2VtWzBdLCB7fSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICAgICAgJG1lbWJyby5pbWFnZW0gPSByZXNwLmRhdGE7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkKCRtZW1icm8pO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkaWNpb25hIG1lbWJyb1xuICAgICAqL1xuICAgICRzY29wZS5hZGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkbWVtYnJvID0gJHNjb3BlLm1lbWJybztcblxuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLnBvc3QoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2VxdWlwZScsICRtZW1icm8sIGNvbmZpZylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAyMDEpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnVybCgnL2VxdWlwZScpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvIGNhZGFzdHJhbmRvIG1lbWJybywgdGVudGUgbm92YW1lbnRlIG1haXMgdGFyZGUnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBtZW1icm8gZGEgRXF1aXBlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKi9cbiAgICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChjb25maXJtKCdWb2PDqiBkZXNlamEgcmVhbG1lbnRlIGFwYWdhciBvIG1lbWJybz9cXG5Fc3RlIHByb2NlZGltZW50byDDqSBpcnJldmVyc8OtdmVsIScpKSB7XG4gICAgICAgICAgICAkaHR0cFxuICAgICAgICAgICAgICAgIC5kZWxldGUoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2VxdWlwZS8nICsgaWQsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWVtYnJvIHJlbW92aWRvIGNvbSBzdWNlc3NvISdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvZXF1aXBlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJybyByZW1vdmVuZG8gbWVtYnJvLCB0ZW50ZSBub3ZhbWVudGUgbWFpcyB0YXJkZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVkaXRhIG1lbWJyb1xuICAgICAqL1xuICAgICRzY29wZS5lZGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLnB1dCgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnZXF1aXBlLycgKyAkcm91dGVQYXJhbXMuaWQsICRzY29wZS5tZW1icm8sIGNvbmZpZylcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWVtYnJvIGF0dWFsaXphZG8gY29tIHN1Y2Vzc28hJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnT2NvcnJldSB1bSBlcnJvIGF0dWFsaXphbmRvIG9zIGRhZG9zIGRvIG1lbWJybywgdGVudGUgbm92YW1lbnRlIG1haXMgdGFyZGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFZpc3VhbGl6YSBtZW1icm9cbiAgICAgKi9cbiAgICAkc2NvcGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLmdldCgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnZXF1aXBlLycgKyAkcm91dGVQYXJhbXMuaWQsIGNvbmZpZylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJybyA9IChkYXRhLmRhdGEuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbXlBcHAuZXF1aXBlJywgWyduZ1JvdXRlJywgJ25nRmlsZVVwbG9hZCddKVxuXG4gICAgLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignL2VxdWlwZScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZXF1aXBlL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdFcXVpcGVDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvZXF1aXBlL2FkaWNpb25hcicsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZXF1aXBlL2FkZC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRXF1aXBlQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2VxdWlwZS9lZGl0YXIvOmlkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9lcXVpcGUvZWRpdC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRXF1aXBlQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcblxuICAgIC5jb250cm9sbGVyKCdFcXVpcGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICckaHR0cCcsICdVcGxvYWQnLCBFcXVpcGVDb250cm9sbGVyXSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
