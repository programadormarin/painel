"use strict";function EquipeController(e,t,a,o,n){e.curPage=1,e.pageSize=12,e.load=function(){var t=$('meta[name="api"]').attr("content")+"equipe?page="+e.curPage+"&limit="+e.pageSize;o.get(t).then(function(t){e.linhas=t.data})},e.add=function(){var t=e.membro;n.upload({url:$('meta[name="api"]').attr("content")+"equipe",data:t,headers:config.headers}).then(function(t){a.url("/equipe"),e.load()},function(t){e.status={type:"danger",message:"Erro cadastrando membro, tente novamente mais tarde"}},function(e){var t=parseInt(100*e.loaded/e.total);console.log("progress: "+t+"% "+e.config.data.file.name)})},e["delete"]=function(t){confirm("Você deseja realmente apagar o membro?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"equipe/"+t).then(function(t){204==t.status?(e.status={type:"success",message:"Membro removido com sucesso!"},a.path("/equipe"),e.load()):e.status={type:"danger",message:"Erro removendo membro, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"equipe/"+t.id,e.membro).success(function(t){e.status={type:"success",message:"Membro atualizado com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando os dados do membro, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"equipe/"+t.id).then(function(t){e.membro=t.data.data})}}angular.module("myApp.equipe",["ngRoute","ngFileUpload"]).config(["$routeProvider",function(e){e.when("/equipe",{templateUrl:"modules/equipe/index.html",controller:"EquipeController"}).when("/equipe/adicionar",{templateUrl:"modules/equipe/add.html",controller:"EquipeController"}).when("/equipe/editar/:id",{templateUrl:"modules/equipe/edit.html",controller:"EquipeController"})}]).controller("EquipeController",["$scope","$routeParams","$location","$http","Upload",EquipeController]);
//# sourceMappingURL=data:application/json;base64,
