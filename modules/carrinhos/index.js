"use strict";function CarrinhosController(a,e,r,t,n){a.curPage=1,a.pageSize=12;var o={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};a.load=function(){t.get($('meta[name="api"]').attr("content")+"carrinho?page="+a.curPage+"&limit="+a.pageSize,o).then(function(e){a.linhas=e.data,a.total=0;for(var r=new Array,t=1;t<=e.data.pageCount;t++)r.push(t);a.paginas=r})},a["delete"]=function(e){if(confirm("Você deseja realmente apagar o carrinho?\nEste procedimento é irreversível!")){var r=a.linhas.data[e];t["delete"]($('meta[name="api"]').attr("content")+"carrinho/"+r._id,o).then(function(r){204==r.status?(a.status={type:"success",message:"carrinho removido com sucesso!"},a.linhas.data.splice(e,1)):a.status={type:"danger",message:"Erro removendo carrinho, tente novamente mais tarde"}})}},a.get=function(){t.get($('meta[name="api"]').attr("content")+"carrinho/"+e.id,o).then(function(e){a.carrinho=e.data.data})},a.search=function(){var e=$('meta[name="api"]').attr("content")+"busca/?page="+a.curPage+"&limit="+a.pageSize+"&busca="+a.busca;t.get(e,o).then(function(e){a.linhas=e.data;for(var r=new Array,t=1;t<=e.data.pageCount;t++)r.push(t);a.paginas=r})}}angular.module("myApp.carrinhos",["ngRoute","angular-cloudinary"]).config(["$routeProvider",function(a){a.when("/carrinhos",{templateUrl:"modules/carrinhos/index.html",controller:"CarrinhosController"}).when("/carrinhos/adicionar",{templateUrl:"modules/carrinhos/add.html",controller:"CarrinhosController"}).when("/carrinhos/editar/:id",{templateUrl:"modules/carrinhos/edit.html",controller:"CarrinhosController"})}]).controller("CarrinhosController",["$scope","$routeParams","$location","$http","cloudinary",CarrinhosController]);
//# sourceMappingURL=data:application/json;base64,
