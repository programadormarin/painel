"use strict";function SlidesController(e,t,a,o,n){e.curPage=1,e.pageSize=12;var s={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){o.get($('meta[name="api"]').attr("content")+"slide?page="+e.curPage+"&limit="+e.pageSize,s).then(function(t){e.linhas=t.data})},e.add=function(){var t=e.produto;n.upload({url:$('meta[name="api"]').attr("content")+"slide",data:t,headers:s.headers}).then(function(t){a.url("/slides"),e.load()},function(t){e.status={type:"danger",message:"Erro cadastrando slide, tente novamente mais tarde"}},function(e){var t=parseInt(100*e.loaded/e.total);console.log("progress: "+t+"% "+e.config.data.file.name)})},e["delete"]=function(t){confirm("Você deseja realmente apagar o slide?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"slide/"+t,s).then(function(t){204==t.status?(e.status={type:"success",message:"Slide removido com sucesso!"},a.path("/slides"),e.load()):e.status={type:"danger",message:"Erro removendo slide, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"slide/"+t.id,e.produto,s).success(function(t){e.status={type:"success",message:"produto atualizado com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando os dados do slide, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"slide/"+t.id,s).then(function(t){e.produto=t.data.data})}}angular.module("myApp.slides",["ngRoute","ngFileUpload"]).config(["$routeProvider",function(e){e.when("/slides",{templateUrl:"modules/slides/index.html",controller:"SlidesController"}).when("/slides/adicionar",{templateUrl:"modules/slides/add.html",controller:"SlidesController"}).when("/slides/editar/:id",{templateUrl:"modules/slides/edit.html",controller:"SlidesController"})}]).controller("SlidesController",["$scope","$routeParams","$location","$http","Upload",SlidesController]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2xpZGVzL2luZGV4LmpzIl0sIm5hbWVzIjpbIlNsaWRlc0NvbnRyb2xsZXIiLCIkc2NvcGUiLCIkcm91dGVQYXJhbXMiLCIkbG9jYXRpb24iLCIkaHR0cCIsIiR1cGxvYWQiLCJjdXJQYWdlIiwicGFnZVNpemUiLCJjb25maWciLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJTaXRlIiwibG9hZCIsImdldCIsIiQiLCJhdHRyIiwidGhlbiIsInJlc3VsdCIsImxpbmhhcyIsImFkZCIsIiRwcm9kdXRvIiwicHJvZHV0byIsInVwbG9hZCIsInVybCIsImRhdGEiLCJyZXNwIiwic3RhdHVzIiwidHlwZSIsIm1lc3NhZ2UiLCJldnQiLCJwcm9ncmVzc1BlcmNlbnRhZ2UiLCJwYXJzZUludCIsImxvYWRlZCIsInRvdGFsIiwiY29uc29sZSIsImxvZyIsImZpbGUiLCJuYW1lIiwiaWQiLCJjb25maXJtIiwicGF0aCIsImVkaXQiLCJwdXQiLCJzdWNjZXNzIiwiZXJyb3IiLCJhbmd1bGFyIiwibW9kdWxlIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxZQVlBLFNBQVNBLGtCQUFrQkMsRUFBUUMsRUFBY0MsRUFBV0MsRUFBT0MsR0FDL0RKLEVBQU9LLFFBQVcsRUFDbEJMLEVBQU9NLFNBQVcsRUFPbEIsSUFBSUMsSUFDQUMsU0FDSUMsY0FBZUMsYUFBYUMsUUFBUSxTQUNwQ0MsS0FBTUYsYUFBYUMsUUFBUSxTQU9uQ1gsR0FBT2EsS0FBTyxXQUNWVixFQUNLVyxJQUFJQyxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLGNBQWdCaEIsRUFBT0ssUUFBVSxVQUFZTCxFQUFPTSxTQUFVQyxHQUMxR1UsS0FBSyxTQUFVQyxHQUNabEIsRUFBT21CLE9BQVVELEVBQVcsUUFPeENsQixFQUFPb0IsSUFBTSxXQUNULEdBQUlDLEdBQVdyQixFQUFPc0IsT0FFdEJsQixHQUNLbUIsUUFDR0MsSUFBS1QsRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxRQUM3Q1MsS0FBTUosRUFDTmIsUUFBU0QsRUFBT0MsVUFFbkJTLEtBQ0csU0FBVVMsR0FDTnhCLEVBQVVzQixJQUFJLFdBQ2R4QixFQUFPYSxRQUVYLFNBQVVhLEdBQ04xQixFQUFPMkIsUUFDSEMsS0FBTSxTQUNOQyxRQUFTLHVEQUdqQixTQUFVQyxHQUNOLEdBQUlDLEdBQXFCQyxTQUFTLElBQVFGLEVBQUlHLE9BQVNILEVBQUlJLE1BRTNEQyxTQUFRQyxJQUFJLGFBQWVMLEVBQXFCLEtBQU9ELEVBQUl2QixPQUFPa0IsS0FBS1ksS0FBS0MsU0FVNUZ0QyxFQUFBQSxVQUFnQixTQUFVdUMsR0FDbEJDLFFBQVEsNkVBQ1JyQyxFQUFBQSxVQUNZWSxFQUFFLG9CQUFvQkMsS0FBSyxXQUFhLFNBQVd1QixFQUFJaEMsR0FDOURVLEtBQUssU0FBVVEsR0FDTyxLQUFmQSxFQUFLRSxRQUNMM0IsRUFBTzJCLFFBQ0hDLEtBQU0sVUFDTkMsUUFBUywrQkFHYjNCLEVBQVV1QyxLQUFLLFdBRWZ6QyxFQUFPYSxRQUVQYixFQUFPMkIsUUFDSEMsS0FBTSxTQUNOQyxRQUFTLHVEQVVqQzdCLEVBQU8wQyxLQUFPLFdBQ1Z2QyxFQUNLd0MsSUFBSTVCLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsU0FBV2YsRUFBYXNDLEdBQUl2QyxFQUFPc0IsUUFBU2YsR0FDeEZxQyxRQUFRLFNBQVVuQixHQUNmekIsRUFBTzJCLFFBQ0hDLEtBQU0sVUFDTkMsUUFBUyxxQ0FHaEJnQixNQUFNLFdBQ0g3QyxFQUFPMkIsUUFDSEMsS0FBTSxTQUNOQyxRQUFTLGdGQVF6QjdCLEVBQU9jLElBQU0sV0FDVFgsRUFDS1csSUFBSUMsRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxTQUFXZixFQUFhc0MsR0FBSWhDLEdBQ3hFVSxLQUFLLFNBQVVRLEdBQ1p6QixFQUFPc0IsUUFBV0csRUFBS0EsS0FBUyxRQUtoRHFCLFFBQ0tDLE9BQU8sZ0JBQWlCLFVBQVcsaUJBRW5DeEMsUUFBUSxpQkFBa0IsU0FBVXlDLEdBQ2pDQSxFQUNLQyxLQUFLLFdBQ0ZDLFlBQWEsNEJBQ2JDLFdBQVkscUJBRWZGLEtBQUsscUJBQ0ZDLFlBQWEsMEJBQ2JDLFdBQVkscUJBRWZGLEtBQUssc0JBQ0ZDLFlBQWEsMkJBQ2JDLFdBQVksd0JBS3ZCQSxXQUFXLG9CQUFxQixTQUFVLGVBQWdCLFlBQWEsUUFBUyxTQUFVcEQiLCJmaWxlIjoibW9kdWxlcy9zbGlkZXMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2xpZGVzXG4gKlxuICogQHBhcmFtICRzY29wZVxuICogQHBhcmFtICRyb3V0ZVBhcmFtc1xuICogQHBhcmFtICRsb2NhdGlvblxuICogQHBhcmFtICRodHRwXG4gKiBAcGFyYW0gVXBsb2FkXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU2xpZGVzQ29udHJvbGxlciAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgJGh0dHAsICR1cGxvYWQpIHtcbiAgICAkc2NvcGUuY3VyUGFnZSAgPSAxO1xuICAgICRzY29wZS5wYWdlU2l6ZSA9IDEyO1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhbCBjb25maWdcbiAgICAgKlxuICAgICAqIEB0eXBlIHt7aGVhZGVyczoge0F1dGhvcml6YXRpb24sIFNpdGV9fX1cbiAgICAgKi9cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIFNpdGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaXRlJylcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYXJyZWdhciBTbGlkZXNcbiAgICAgKi9cbiAgICAkc2NvcGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5nZXQoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ3NsaWRlP3BhZ2U9JyArICRzY29wZS5jdXJQYWdlICsgJyZsaW1pdD0nICsgJHNjb3BlLnBhZ2VTaXplLCBjb25maWcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpbmhhcyA9IChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5zZXJpciBTbGlkZVxuICAgICAqL1xuICAgICRzY29wZS5hZGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkcHJvZHV0byA9ICRzY29wZS5wcm9kdXRvO1xuXG4gICAgICAgICR1cGxvYWRcbiAgICAgICAgICAgIC51cGxvYWQoe1xuICAgICAgICAgICAgICAgIHVybDogJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ3NsaWRlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiAkcHJvZHV0byxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi51cmwoJy9zbGlkZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvIGNhZGFzdHJhbmRvIHNsaWRlLCB0ZW50ZSBub3ZhbWVudGUgbWFpcyB0YXJkZSdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzUGVyY2VudGFnZSA9IHBhcnNlSW50KDEwMC4wICogZXZ0LmxvYWRlZCAvIGV2dC50b3RhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgcHJvZ3Jlc3NQZXJjZW50YWdlICsgJyUgJyArIGV2dC5jb25maWcuZGF0YS5maWxlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwYWdhciBTbGlkZVxuICAgICAqXG4gICAgICogQHBhcmFtIGlkXG4gICAgICovXG4gICAgJHNjb3BlLmRlbGV0ZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBpZiAoY29uZmlybSgnVm9jw6ogZGVzZWphIHJlYWxtZW50ZSBhcGFnYXIgbyBzbGlkZT9cXG5Fc3RlIHByb2NlZGltZW50byDDqSBpcnJldmVyc8OtdmVsIScpKSB7XG4gICAgICAgICAgICAkaHR0cFxuICAgICAgICAgICAgICAgIC5kZWxldGUoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ3NsaWRlLycgKyBpZCwgY29uZmlnKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSAyMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTbGlkZSByZW1vdmlkbyBjb20gc3VjZXNzbyEnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3NsaWRlcycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJybyByZW1vdmVuZG8gc2xpZGUsIHRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVkaXRhciBTbGlkZVxuICAgICAqL1xuICAgICRzY29wZS5lZGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgICAgLnB1dCgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnc2xpZGUvJyArICRyb3V0ZVBhcmFtcy5pZCwgJHNjb3BlLnByb2R1dG8sIGNvbmZpZylcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJvZHV0byBhdHVhbGl6YWRvIGNvbSBzdWNlc3NvISdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdPY29ycmV1IHVtIGVycm8gYXR1YWxpemFuZG8gb3MgZGFkb3MgZG8gc2xpZGUsIHRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmlzdWFsaXphciBTbGlkZVxuICAgICAqL1xuICAgICRzY29wZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdzbGlkZS8nICsgJHJvdXRlUGFyYW1zLmlkLCBjb25maWcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9kdXRvID0gKGRhdGEuZGF0YS5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdteUFwcC5zbGlkZXMnLCBbJ25nUm91dGUnLCAnbmdGaWxlVXBsb2FkJ10pXG5cbiAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKCcvc2xpZGVzJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9zbGlkZXMvaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NsaWRlc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9zbGlkZXMvYWRpY2lvbmFyJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9zbGlkZXMvYWRkLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTbGlkZXNDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvc2xpZGVzL2VkaXRhci86aWQnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3NsaWRlcy9lZGl0Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTbGlkZXNDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuXG4gICAgLmNvbnRyb2xsZXIoJ1NsaWRlc0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgJ1VwbG9hZCcsIFNsaWRlc0NvbnRyb2xsZXJdKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
