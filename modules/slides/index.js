"use strict";function SlidesController(e,t,a,o,n){e.curPage=1,e.pageSize=12;var s={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){o.get($('meta[name="api"]').attr("content")+"slide?page="+e.curPage+"&limit="+e.pageSize,s).then(function(t){e.linhas=t.data})},e.add=function(){var t=e.produto;n.upload({url:$('meta[name="api"]').attr("content")+"slide",data:t,headers:s.headers}).then(function(t){a.url("/slides"),e.load()},function(t){e.status={type:"danger",message:"Erro cadastrando slide, tente novamente mais tarde"}},function(e){var t=parseInt(100*e.loaded/e.total);console.log("progress: "+t+"% "+e.config.data.file.name)})},e["delete"]=function(t){confirm("Você deseja realmente apagar o slide?\nEste procedimento é irreversível!")&&o["delete"]($('meta[name="api"]').attr("content")+"slide/"+t,s).then(function(t){204==t.status?(e.status={type:"success",message:"Slide removido com sucesso!"},a.path("/slides"),e.load()):e.status={type:"danger",message:"Erro removendo slide, tente novamente mais tarde"}})},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"slide/"+t.id,e.produto,s).success(function(t){e.status={type:"success",message:"produto atualizado com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando os dados do slide, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"slide/"+t.id,s).then(function(t){e.produto=t.data.data})}}angular.module("myApp.slides",["ngRoute","ngFileUpload"]).config(["$routeProvider",function(e){e.when("/slides",{templateUrl:"modules/slides/index.html",controller:"SlidesController"}).when("/slides/adicionar",{templateUrl:"modules/slides/add.html",controller:"SlidesController"}).when("/slides/editar/:id",{templateUrl:"modules/slides/edit.html",controller:"SlidesController"})}]).controller("SlidesController",["$scope","$routeParams","$location","$http","Upload",SlidesController]);
//# sourceMappingURL=data:application/json;base64,
