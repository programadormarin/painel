"use strict";function EmpregosController(e,t,a,o){e.curPage=1,e.pageSize=12;var r={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){o.get($('meta[name="api"]').attr("content")+"emprego?page="+e.curPage+"&limit="+e.pageSize,r).then(function(t){e.linhas=t.data})},e.add=function(){o.post($('meta[name="api"]').attr("content")+"emprego",e.emprego,r).success(function(){a.url("/empregos"),e.load()}).error(function(){e.status={type:"danger",message:"Ocorreu um erro ao salvar a vaga"}})},e["delete"]=function(t){if(confirm("Você deseja realmente apagar a vaga?\nEste procedimento é irreversível!")){var a=e.linhas.data[t];o["delete"]($('meta[name="api"]').attr("content")+"emprego/"+a._id,r).success(function(a){e.status={type:"success",message:"Vaga removida com sucesso!"},e.linhas.data.splice(t,1)}).error(function(){e.status={type:"danger",message:"Erro removendo vaga, tente novamente mais tarde"}})}},e.edit=function(){o.put($('meta[name="api"]').attr("content")+"emprego/"+t.id,e.emprego,r).success(function(){e.status={type:"success",message:"Vaga atualizada com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando os dados da vaga, tente novamente mais tarde"}})},e.get=function(){o.get($('meta[name="api"]').attr("content")+"emprego/"+t.id,r).then(function(t){e.emprego=t.data.data})}}angular.module("myApp.empregos",["ngRoute"]).config(["$routeProvider",function(e){e.when("/empregos",{templateUrl:"modules/empregos/index.html",controller:"EmpregosController"}).when("/empregos/adicionar",{templateUrl:"modules/empregos/add.html",controller:"EmpregosController"}).when("/empregos/editar/:id",{templateUrl:"modules/empregos/edit.html",controller:"EmpregosController"})}]).controller("EmpregosController",["$scope","$routeParams","$location","$http",EmpregosController]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVtcHJlZ29zL2luZGV4LmpzIl0sIm5hbWVzIjpbIkVtcHJlZ29zQ29udHJvbGxlciIsIiRzY29wZSIsIiRyb3V0ZVBhcmFtcyIsIiRsb2NhdGlvbiIsIiRodHRwIiwiY3VyUGFnZSIsInBhZ2VTaXplIiwiY29uZmlnIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiU2l0ZSIsImxvYWQiLCJnZXQiLCIkIiwiYXR0ciIsInRoZW4iLCJyZXN1bHQiLCJsaW5oYXMiLCJhZGQiLCJwb3N0IiwiZW1wcmVnbyIsInN1Y2Nlc3MiLCJ1cmwiLCJlcnJvciIsInN0YXR1cyIsInR5cGUiLCJtZXNzYWdlIiwiaWQiLCJjb25maXJtIiwidG9EZWxldGUiLCJkYXRhIiwiX2lkIiwic3BsaWNlIiwiZWRpdCIsInB1dCIsImFuZ3VsYXIiLCJtb2R1bGUiLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBWUEsU0FBU0Esb0JBQW9CQyxFQUFRQyxFQUFjQyxFQUFXQyxHQUMxREgsRUFBT0ksUUFBVyxFQUNsQkosRUFBT0ssU0FBVyxFQU9sQixJQUFJQyxJQUNBQyxTQUNJQyxjQUFlQyxhQUFhQyxRQUFRLFNBQ3BDQyxLQUFNRixhQUFhQyxRQUFRLFNBT25DVixHQUFPWSxLQUFPLFdBQ1ZULEVBQ0tVLElBQUlDLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsZ0JBQWtCZixFQUFPSSxRQUFVLFVBQVlKLEVBQU9LLFNBQVVDLEdBQzVHVSxLQUFLLFNBQVVDLEdBQ1pqQixFQUFPa0IsT0FBVUQsRUFBVyxRQU94Q2pCLEVBQU9tQixJQUFNLFdBQ1RoQixFQUNLaUIsS0FBS04sRUFBRSxvQkFBb0JDLEtBQUssV0FBYSxVQUFXZixFQUFPcUIsUUFBU2YsR0FDeEVnQixRQUFRLFdBQ0xwQixFQUFVcUIsSUFBSSxhQUNkdkIsRUFBT1ksU0FFVlksTUFBTSxXQUNIeEIsRUFBT3lCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUyx1Q0FVekIzQixFQUFBQSxVQUFnQixTQUFVNEIsR0FDdEIsR0FBSUMsUUFBUSwyRUFBNEUsQ0FDcEYsR0FBSUMsR0FBVzlCLEVBQU9rQixPQUFPYSxLQUFLSCxFQUVsQ3pCLEdBQUFBLFVBQ1lXLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsV0FBYWUsRUFBU0UsSUFBSzFCLEdBQzFFZ0IsUUFBUSxTQUFVUyxHQUNmL0IsRUFBT3lCLFFBQ0hDLEtBQU0sVUFDTkMsUUFBUyw4QkFHYjNCLEVBQU9rQixPQUFPYSxLQUFLRSxPQUFPTCxFQUFJLEtBRWpDSixNQUFNLFdBQ0h4QixFQUFPeUIsUUFDSEMsS0FBTSxTQUNOQyxRQUFTLHVEQVM3QjNCLEVBQU9rQyxLQUFPLFdBQ1YvQixFQUNLZ0MsSUFBSXJCLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsV0FBYWQsRUFBYTJCLEdBQUk1QixFQUFPcUIsUUFBU2YsR0FDMUZnQixRQUFRLFdBQ0x0QixFQUFPeUIsUUFDSEMsS0FBTSxVQUNOQyxRQUFTLGtDQUdoQkgsTUFBTSxXQUNIeEIsRUFBT3lCLFFBQ0hDLEtBQU0sU0FDTkMsUUFBUywrRUFRekIzQixFQUFPYSxJQUFNLFdBQ1RWLEVBQ0tVLElBQUlDLEVBQUUsb0JBQW9CQyxLQUFLLFdBQWEsV0FBYWQsRUFBYTJCLEdBQUl0QixHQUMxRVUsS0FBSyxTQUFVZSxHQUNaL0IsRUFBT3FCLFFBQVdVLEVBQUtBLEtBQVMsUUFLaERLLFFBQVFDLE9BQU8sa0JBQW1CLFlBQzdCL0IsUUFBUSxpQkFBa0IsU0FBVWdDLEdBQ2pDQSxFQUNLQyxLQUFLLGFBQ0ZDLFlBQWEsOEJBQ2JDLFdBQVksdUJBRWZGLEtBQUssdUJBQ0ZDLFlBQWEsNEJBQ2JDLFdBQVksdUJBRWZGLEtBQUssd0JBQ0ZDLFlBQWEsNkJBQ2JDLFdBQVksMEJBS3ZCQSxXQUFXLHNCQUF1QixTQUFVLGVBQWdCLFlBQWEsUUFBUzFDIiwiZmlsZSI6ImVtcHJlZ29zL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEVtcHJlZ29zXG4gKlxuICogQHBhcmFtICRzY29wZVxuICogQHBhcmFtICRyb3V0ZVBhcmFtc1xuICogQHBhcmFtICRsb2NhdGlvblxuICogQHBhcmFtICRodHRwXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEVtcHJlZ29zQ29udHJvbGxlciAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgJGh0dHApIHtcbiAgICAkc2NvcGUuY3VyUGFnZSAgPSAxO1xuICAgICRzY29wZS5wYWdlU2l6ZSA9IDEyO1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhbCBjb25maWdcbiAgICAgKlxuICAgICAqIEB0eXBlIHt7aGVhZGVyczoge0F1dGhvcml6YXRpb24sIFNpdGV9fX1cbiAgICAgKi9cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIFNpdGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaXRlJylcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYXJyZWdhIG9zIEVtcHJlZ29zXG4gICAgICovXG4gICAgJHNjb3BlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdlbXByZWdvP3BhZ2U9JyArICRzY29wZS5jdXJQYWdlICsgJyZsaW1pdD0nICsgJHNjb3BlLnBhZ2VTaXplLCBjb25maWcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpbmhhcyA9IChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FkYXN0cmEgdW0gRW1wcmVnb1xuICAgICAqL1xuICAgICRzY29wZS5hZGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAucG9zdCgkKCdtZXRhW25hbWU9XCJhcGlcIl0nKS5hdHRyKCdjb250ZW50JykgKyAnZW1wcmVnbycsICRzY29wZS5lbXByZWdvLCBjb25maWcpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnVybCgnL2VtcHJlZ29zJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnT2NvcnJldSB1bSBlcnJvIGFvIHNhbHZhciBhIHZhZ2EnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB1bSBFbXByZWdvXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKi9cbiAgICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChjb25maXJtKCdWb2PDqiBkZXNlamEgcmVhbG1lbnRlIGFwYWdhciBhIHZhZ2E/XFxuRXN0ZSBwcm9jZWRpbWVudG8gw6kgaXJyZXZlcnPDrXZlbCEnKSkge1xuICAgICAgICAgICAgdmFyIHRvRGVsZXRlID0gJHNjb3BlLmxpbmhhcy5kYXRhW2lkXTtcblxuICAgICAgICAgICAgJGh0dHBcbiAgICAgICAgICAgICAgICAuZGVsZXRlKCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdlbXByZWdvLycgKyB0b0RlbGV0ZS5faWQsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1ZhZ2EgcmVtb3ZpZGEgY29tIHN1Y2Vzc28hJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saW5oYXMuZGF0YS5zcGxpY2UoaWQsIDEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJybyByZW1vdmVuZG8gdmFnYSwgdGVudGUgbm92YW1lbnRlIG1haXMgdGFyZGUnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRWRpdGFyIEVtcHJlZ29cbiAgICAgKi9cbiAgICAkc2NvcGUuZWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAgIC5wdXQoJCgnbWV0YVtuYW1lPVwiYXBpXCJdJykuYXR0cignY29udGVudCcpICsgJ2VtcHJlZ28vJyArICRyb3V0ZVBhcmFtcy5pZCwgJHNjb3BlLmVtcHJlZ28sIGNvbmZpZylcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdWYWdhIGF0dWFsaXphZGEgY29tIHN1Y2Vzc28hJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ09jb3JyZXUgdW0gZXJybyBhdHVhbGl6YW5kbyBvcyBkYWRvcyBkYSB2YWdhLCB0ZW50ZSBub3ZhbWVudGUgbWFpcyB0YXJkZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFZpc3VhbGl6YXIgRW1wcmVnb1xuICAgICAqL1xuICAgICRzY29wZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwXG4gICAgICAgICAgICAuZ2V0KCQoJ21ldGFbbmFtZT1cImFwaVwiXScpLmF0dHIoJ2NvbnRlbnQnKSArICdlbXByZWdvLycgKyAkcm91dGVQYXJhbXMuaWQsIGNvbmZpZylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtcHJlZ28gPSAoZGF0YS5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5hbmd1bGFyLm1vZHVsZSgnbXlBcHAuZW1wcmVnb3MnLCBbJ25nUm91dGUnXSlcbiAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKCcvZW1wcmVnb3MnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2VtcHJlZ29zL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdFbXByZWdvc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9lbXByZWdvcy9hZGljaW9uYXInLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2VtcHJlZ29zL2FkZC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRW1wcmVnb3NDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvZW1wcmVnb3MvZWRpdGFyLzppZCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZW1wcmVnb3MvZWRpdC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRW1wcmVnb3NDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuXG4gICAgLmNvbnRyb2xsZXIoJ0VtcHJlZ29zQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnJGh0dHAnLCBFbXByZWdvc0NvbnRyb2xsZXJdKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
