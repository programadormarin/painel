"use strict";function ParceirosController(e,r,a,t,o){e.curPage=1,e.pageSize=12;var n={headers:{Authorization:localStorage.getItem("token"),Site:localStorage.getItem("site")}};e.load=function(){t.get($('meta[name="api"]').attr("content")+"parceiro?page="+e.curPage+"&limit="+e.pageSize,n).then(function(r){e.linhas=r.data})},e.upload=function(){var r=e.parceiro;o.upload(r.imagem[0],{}).then(function(a){r.imagem=a.data,e.add(r)})},e.add=function(){t.post($('meta[name="api"]').attr("content")+"parceiro",e.parceiro,n).success(function(){a.url("/parceiros"),e.load()}).error(function(){e.status={type:"danger",message:"Erro inserindo parceiro"}})},e["delete"]=function(r){if(confirm("Você deseja realmente apagar o parceiro?\nEste procedimento é irreversível!")){var o=e.linhas.data[r];t["delete"]($('meta[name="api"]').attr("content")+"parceiro/"+o._id,n).then(function(r){204==r.status?(e.status={type:"success",message:"Parceiro removido com sucesso!"},a.path("/parceiros"),e.load()):e.status={type:"danger",message:"Erro removendo parceiro, tente novamente mais tarde"}})}},e.edit=function(){t.put($('meta[name="api"]').attr("content")+"parceiro/"+r.id,e.parceiro,n).success(function(r){e.status={type:"success",message:"Parceiro atualizado com sucesso!"}}).error(function(){e.status={type:"danger",message:"Ocorreu um erro atualizando os dados do parceiro, tente novamente mais tarde"}})},e.get=function(){t.get($('meta[name="api"]').attr("content")+"parceiro/"+r.id,n).then(function(r){e.parceiro=r.data.data})}}angular.module("myApp.parceiros",["ngRoute","angular-cloudinary"]).config(["$routeProvider",function(e){e.when("/parceiros",{templateUrl:"modules/parceiros/index.html",controller:"ParceirosController"}).when("/parceiros/adicionar",{templateUrl:"modules/parceiros/add.html",controller:"ParceirosController"}).when("/parceiros/editar/:id",{templateUrl:"modules/parceiros/edit.html",controller:"ParceirosController"})}]).controller("ParceirosController",["$scope","$routeParams","$location","$http","cloudinary",ParceirosController]);
//# sourceMappingURL=data:application/json;base64,
